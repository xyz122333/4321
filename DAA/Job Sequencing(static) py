class job:
    def __init__(self, id, deadline, profit):
        self.id = id
        self.deadline = deadline
        self.profit = profit




class Solution:
    def jobScheduling(self, jobs):
        jobs.sort(key=lambda x: x.profit, reverse=True)
        maxi = jobs[0].deadline
        for i in range(1, len(jobs)):
            maxi = max(maxi, jobs[i].deadline)


        slot = [-1] * (maxi + 1)
        countJobs = 0
        jobProfit = 0


        for i in range(len(jobs)):
            for j in range(jobs[i].deadline, 0, -1):
                if slot[j] == -1:
                    slot[j] = i
                    countJobs += 1
                    jobProfit += jobs[i].profit
                    break


        return countJobs, jobProfit




















''' 

Given an array of jobs where every job has a deadline and associated profit if the job is finished before the deadline. 
It is also given that every job takes a single unit of time, 
so the minimum possible deadline for any job is 1. 
Maximize the total profit if only one job can be scheduled at a time.

Example:
Input: Four Jobs with following deadlines and profits

JobID  Deadline  Profit

  a           4          20   
  b           1          10
  c           1          40  
  d          1          30

Output: Following is maximum profit sequence of jobs: c, a   

Input:  Five Jobs with following deadlines and profits

JobID   Deadline  Profit

  a            2          100
  b            1          19
  c            2          27
 d            1          25
 e            3          15

Output: Following is maximum profit sequence of jobs: c, a, e

Algorithm:
1. Sort all jobs in decreasing order of profit. 
2. Iterate on jobs in decreasing order of profit.For each job , do the following : 
    1. Find a time slot i, such that slot is empty and i < deadline and i is greatest.Put the job in 
       this slot and mark this slot filled. 
    2. If no such i exists, then ignore the job. 
'''





if __name__ == "__main__":
    jobs = [job(1, 4, 20), job(2, 1, 10), job(3, 2, 40), job(4, 2, 30)]
    count, profit = Solution().jobScheduling(jobs)
    print(count, profit)
